{"version":3,"file":"coverage.js","sourceRoot":"","sources":["../../src/istanbul/coverage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"log4js\";\r\n\r\nimport * as convertSourceMap from \"convert-source-map\";\r\nimport * as istanbul from \"istanbul-lib-instrument\";\r\nimport * as path from \"path\";\r\n\r\nimport { EmitOutput } from \"../compiler/emit-output\";\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { File } from \"../shared/file\";\r\nimport { CoverageCallback } from \"./coverage-callback\";\r\n\r\nexport class Coverage {\r\n\r\n    private instrumenter: istanbul.Instrumenter;\r\n    private log: Logger;\r\n\r\n    constructor(private config: Configuration) { }\r\n\r\n    public initialize(logger: any): void {\r\n\r\n        this.log = logger.create(\"coverage.karma-typescript\");\r\n        this.log.debug(\"Initializing\");\r\n\r\n        this.config.whenReady(() => {\r\n            this.log.debug(\"Configuring coverage preprocessor\");\r\n            this.instrumenter = istanbul.createInstrumenter(this.config.coverageOptions.instrumenterOptions);\r\n        });\r\n    }\r\n\r\n    public instrument(file: File, bundled: string, emitOutput: EmitOutput, callback: CoverageCallback): void {\r\n\r\n        if (this.config.hasPreprocessor(\"commonjs\")) {\r\n            this.log.debug(\"karma-commonjs already configured\");\r\n            callback(bundled);\r\n            return;\r\n        }\r\n\r\n        if (this.config.hasPreprocessor(\"coverage\")) {\r\n            this.log.debug(\"karma-coverage already configured\");\r\n            callback(bundled);\r\n            return;\r\n        }\r\n\r\n        if (!this.config.coverageOptions.instrumentation ||\r\n            this.isExcluded(this.config.coverageOptions.exclude, file.relativePath) ||\r\n            this.hasNoOutput(emitOutput)) {\r\n\r\n            this.log.debug(\"Excluding file %s from instrumentation\", file.originalPath);\r\n            callback(bundled);\r\n            return;\r\n        }\r\n\r\n        this.log.debug(\"Processing \\\"%s\\\".\", file.originalPath);\r\n\r\n        let sourceMap = convertSourceMap.fromSource(bundled);\r\n\r\n        if (!sourceMap) {\r\n            sourceMap = convertSourceMap.fromMapFileSource(bundled, path.dirname(file.originalPath));\r\n        }\r\n\r\n        this.instrumenter.instrument(bundled, file.originalPath, (error, instrumentedSource) => {\r\n            if (error) {\r\n                this.log.error(\"%s\\nin %s\", error.message, file.originalPath);\r\n                callback(error.message);\r\n            }\r\n            else {\r\n                callback(instrumentedSource);\r\n            }\r\n        }, sourceMap ? sourceMap.sourcemap : undefined);\r\n    }\r\n\r\n    private hasNoOutput(emitOutput: EmitOutput): boolean {\r\n        return emitOutput.outputText.startsWith(\"//# sourceMappingURL=\");\r\n    }\r\n\r\n    private isExcluded(regex: RegExp | RegExp[], filePath: string): boolean {\r\n        if (Array.isArray(regex)) {\r\n            for (const r of regex) {\r\n                if (r.test(filePath)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return regex.test(filePath);\r\n    }\r\n}\r\n"]}