{"version":3,"file":"threshold.js","sourceRoot":"","sources":["../../src/istanbul/threshold.ts"],"names":[],"mappings":";;;AAAA,wDAA0D;AAC1D,iCAA+B;AAE/B,qCAAuC;AAEvC,mDAAiD;AAEjD;IAEI,mBAAoB,MAAqB,EAAU,GAAW;QAA1C,WAAM,GAAN,MAAM,CAAe;QAAU,QAAG,GAAH,GAAG,CAAQ;IAAI,CAAC;IAE5D,yBAAK,GAAZ,UAAa,OAAY,EAAE,WAAyC;QAApE,iBA2CC;QAzCG,IAAI,eAAe,GAAG,IAAI,CAAC;QAE3B,IAAM,eAAe,GAAG,UAAC,IAAY,EAAE,UAAe,EAAE,eAAiD;YAErG,CAAC,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;gBAEzD,IAAM,MAAM,GAAI,eAAuB,CAAC,GAAG,CAAC,CAAC;gBAC7C,IAAM,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC;gBAChD,IAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBAElC,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,SAAS,EAAE;oBAC7C,eAAe,GAAG,KAAK,CAAC;oBACxB,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,+CAA+C,EAC1D,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;iBAC7D;qBACI,IAAI,MAAM,CAAC,GAAG,GAAG,SAAS,EAAE;oBAC7B,eAAe,GAAG,KAAK,CAAC;oBACxB,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,gDAAgD,EAC3D,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;iBACvD;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAEF,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC;QAC9D,IAAM,aAAa,GAAG,gBAAgB,CAAC,qBAAqB,EAAE,CAAC;QAC/D,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvF,IAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEnF,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ;YAC1C,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAEjE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ;YACxC,IAAM,gBAAgB,GAAG,sBAAS,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACzF,IAAM,UAAU,GAAG,cAAK,CAAC,eAAe,CAAC,IAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxF,eAAe,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEO,+BAAW,GAAnB,UAAoB,WAAyC,EAAE,QAAkB;QAAjF,iBAUC;QATG,IAAM,MAAM,GAAwD,EAAE,CAAC;QACvE,WAAW,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAC,QAAQ;YACjC,IAAM,gBAAgB,GAAG,sBAAS,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACzF,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,QAAQ,CAAC,EAAE;gBAC9C,IAAM,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC3D,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;aAC/C;QACL,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,8BAAU,GAAlB,UAAmB,gBAAwB,EAAE,QAAkB;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAC,OAAO;YACzB,OAAO,SAAS,CAAC,gBAAgB,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oCAAgB,GAAxB,UAAyB,gBAAwB;QAC7C,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO;YACnC,IAAI,SAAS,CAAC,gBAAgB,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE;gBACrD,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;aACnC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACtB,CAAC;IACL,gBAAC;AAAD,CAAC,AA7ED,IA6EC;AA7EY,8BAAS","sourcesContent":["import * as istanbulCoverage from \"istanbul-lib-coverage\";\r\nimport { merge } from \"lodash\";\r\nimport { Logger } from \"log4js\";\r\nimport * as minimatch from \"minimatch\";\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { FileUtils } from \"../shared/file-utils\";\r\n\r\nexport class Threshold {\r\n\r\n    constructor(private config: Configuration, private log: Logger) { }\r\n\r\n    public check(browser: any, coverageMap: istanbulCoverage.CoverageMap) {\r\n\r\n        let passedThreshold = true;\r\n\r\n        const checkThresholds = (name: string, thresholds: any, coverageSummary: istanbulCoverage.CoverageSummary) => {\r\n\r\n            [\"branches\", \"functions\", \"lines\", \"statements\"].forEach((key) => {\r\n\r\n                const result = (coverageSummary as any)[key];\r\n                const uncovered = result.total - result.covered;\r\n                const threshold = thresholds[key];\r\n\r\n                if (threshold < 0 && threshold * -1 < uncovered) {\r\n                    passedThreshold = false;\r\n                    this.log.error(\"%s: Expected max %s uncovered %s, got %s (%s)\",\r\n                        browser.name, (-1 * threshold), key, uncovered, name);\r\n                }\r\n                else if (result.pct < threshold) {\r\n                    passedThreshold = false;\r\n                    this.log.error(\"%s: Expected %s% coverage for %s, got %s% (%s)\",\r\n                        browser.name, threshold, key, result.pct, name);\r\n                }\r\n            });\r\n        };\r\n\r\n        const thresholdConfig = this.config.coverageOptions.threshold;\r\n        const globalSummary = istanbulCoverage.createCoverageSummary();\r\n        const globalSummaries = this.toSummaries(coverageMap, thresholdConfig.global.excludes);\r\n        const fileSummaries = this.toSummaries(coverageMap, thresholdConfig.file.excludes);\r\n\r\n        Object.keys(globalSummaries).forEach((filename) => {\r\n            globalSummary.merge(globalSummaries[filename]);\r\n        });\r\n\r\n        checkThresholds(\"global\", thresholdConfig.global, globalSummary);\r\n\r\n        Object.keys(fileSummaries).forEach((filename) => {\r\n            const relativeFilename = FileUtils.getRelativePath(filename, this.config.karma.basePath);\r\n            const thresholds = merge(thresholdConfig.file, this.getFileOverrides(relativeFilename));\r\n            checkThresholds(filename, thresholds, fileSummaries[filename]);\r\n        });\r\n\r\n        return passedThreshold;\r\n    }\r\n\r\n    private toSummaries(coverageMap: istanbulCoverage.CoverageMap, excludes: string[]) {\r\n        const result: { [key: string]: istanbulCoverage.CoverageSummary } = {};\r\n        coverageMap.files().forEach((filename) => {\r\n            const relativeFilename = FileUtils.getRelativePath(filename, this.config.karma.basePath);\r\n            if (!this.isExcluded(relativeFilename, excludes)) {\r\n                const fileCoverage = coverageMap.fileCoverageFor(filename);\r\n                result[filename] = fileCoverage.toSummary();\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private isExcluded(relativeFilename: string, excludes: string[]) {\r\n        return excludes.some((pattern) => {\r\n            return minimatch(relativeFilename, pattern, { dot: true });\r\n        });\r\n    }\r\n\r\n    private getFileOverrides(relativeFilename: string) {\r\n        let thresholds = {};\r\n        const overrides = this.config.coverageOptions.threshold.file.overrides;\r\n        Object.keys(overrides).forEach((pattern) => {\r\n            if (minimatch(relativeFilename, pattern, { dot: true })) {\r\n                thresholds = overrides[pattern];\r\n            }\r\n        });\r\n        return thresholds;\r\n    }\r\n}\r\n"]}