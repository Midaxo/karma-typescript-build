{"version":3,"file":"reporter.js","sourceRoot":"","sources":["../../src/karma/reporter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as istanbulCoverage from \"istanbul-lib-coverage\";\r\nimport * as istanbulReport from \"istanbul-lib-report\";\r\nimport * as istanbulSourceMaps from \"istanbul-lib-source-maps\";\r\nimport * as istanbulReports from \"istanbul-reports\";\r\n\r\nimport * as lodash from \"lodash\";\r\nimport * as path from \"path\";\r\n\r\nimport { Logger } from \"log4js\";\r\n\r\nimport { Threshold } from \"../istanbul/threshold\";\r\nimport { Configuration } from \"../shared/configuration\";\r\n\r\nconst reporterName = \"karma-typescript\";\r\n\r\nexport class Reporter {\r\n\r\n    public create: (baseReporterDecorator: any, logger: any) => void;\r\n\r\n    private log: Logger;\r\n    private coverageMap: WeakMap<any, any>;\r\n\r\n    constructor(config: Configuration, threshold: Threshold) {\r\n\r\n        const that = this;\r\n\r\n        // tslint:disable-next-line:only-arrow-functions\r\n        this.create = function(baseReporterDecorator: any, logger: any) {\r\n\r\n            baseReporterDecorator(this);\r\n\r\n            that.log = logger.create(`reporter.${reporterName}`);\r\n\r\n            this.onRunStart = () => {\r\n                that.coverageMap = new WeakMap<any, any>();\r\n            };\r\n\r\n            this.onBrowserStart = () => { /**/ };\r\n            this.specFailure = () => { /**/ };\r\n\r\n            this.onBrowserComplete = (browser: any, result: any) => {\r\n                if (result && result.coverage) {\r\n                    that.coverageMap.set(browser, result.coverage);\r\n                }\r\n            };\r\n\r\n            this.onRunComplete = (browsers: any[], results: any) => {\r\n\r\n                browsers.forEach(async (browser: any) => {\r\n\r\n                    const coverage = that.coverageMap.get(browser);\r\n                    const coverageMap = istanbulCoverage.createCoverageMap();\r\n                    coverageMap.merge(coverage);\r\n\r\n                    const sourceMapStore = istanbulSourceMaps.createSourceMapStore();\r\n                    const remappedCoverageMap = await sourceMapStore.transformCoverage(coverageMap);\r\n\r\n                    if (results && config.hasCoverageThreshold && !threshold.check(browser, remappedCoverageMap)) {\r\n                        results.exitCode = 1;\r\n                    }\r\n\r\n                    Object.keys(config.reports).forEach((reportType: any) => {\r\n\r\n                        const reportConfig = config.reports[reportType] as any;\r\n                        const directory = that.getReportDestination(browser, reportConfig, reportType);\r\n\r\n                        if (directory) {\r\n                            that.log.debug(\"Writing coverage to %s\", directory);\r\n                        }\r\n\r\n                        const context = istanbulReport.createContext({\r\n                            // @ts-ignore\r\n                            coverageMap: remappedCoverageMap,\r\n                            dir: directory,\r\n                            // @ts-ignore\r\n                            sourceFinder: sourceMapStore.sourceFinder\r\n                        });\r\n\r\n                        istanbulReports\r\n                            .create(reportType, { file: reportConfig ? reportConfig.filename : undefined })\r\n                            // @ts-ignore\r\n                            .execute(context);\r\n                    });\r\n                });\r\n            };\r\n        };\r\n\r\n        Object.assign(this.create, { $inject: [\"baseReporterDecorator\", \"logger\", \"config\"] });\r\n    }\r\n\r\n    private getReportDestination(browser: any, reportConfig: any, reportType: any) {\r\n\r\n        if (lodash.isPlainObject(reportConfig)) {\r\n            let subdirectory = reportConfig.subdirectory || browser.name;\r\n            if (typeof subdirectory === \"function\") {\r\n                subdirectory = subdirectory(browser);\r\n            }\r\n\r\n            return path.join(reportConfig.directory || \"coverage\", subdirectory);\r\n        }\r\n\r\n        if (lodash.isString(reportConfig) && reportConfig.length > 0) {\r\n            return path.join(reportConfig, browser.name, reportType);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"]}