{"version":3,"file":"preprocessor.js","sourceRoot":"","sources":["../../src/karma/preprocessor.ts"],"names":[],"mappings":";;;AAMA,mDAAiD;AAEjD;IAKI,sBAAY,OAAgB,EAAE,QAAkB,EAAU,MAAqB,EAAE,QAAkB;QAAnG,iBAmCC;QAnCyD,WAAM,GAAN,MAAM,CAAe;QAE3E,IAAI,CAAC,MAAM,GAAG,UAAC,MAAW;YACtB,KAAI,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;YAE1D,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAE5B,OAAO,UAAC,OAAe,EAAE,IAAU,EAAE,IAAkC;gBACnE,IAAI;oBACA,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC3E,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACpD,IAAI,CAAC,YAAY,GAAG,sBAAS,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAE7F,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,UAAC,UAAU;wBAC9B,IAAI,UAAU,CAAC,QAAQ,EAAE;4BACrB,OAAO,IAAI,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;yBAC7C;wBACD,IAAI,UAAU,CAAC,iBAAiB,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;4BAC7D,OAAO,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;yBAC1B;wBACD,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,EAAE,UAAC,OAAe;4BAC7C,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,UAAC,MAAM;gCAClD,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;4BACvB,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;iBACN;gBACD,OAAO,CAAC,EAAE;oBACN,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;oBAChF,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;iBACjB;YACL,CAAC,CAAC;QACN,CAAC,CAAC;QAED,IAAI,CAAC,MAAc,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IACL,mBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,oCAAY","sourcesContent":["import { Logger } from \"log4js\";\r\nimport { Bundler } from \"../bundler/bundler\";\r\nimport { Compiler } from \"../compiler/compiler\";\r\nimport { Coverage } from \"../istanbul/coverage\";\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { File } from \"../shared/file\";\r\nimport { FileUtils } from \"../shared/file-utils\";\r\n\r\nexport class Preprocessor {\r\n\r\n    public create: (helper: any, logger: any) => void;\r\n    private log: Logger;\r\n\r\n    constructor(bundler: Bundler, compiler: Compiler, private config: Configuration, coverage: Coverage) {\r\n\r\n        this.create = (logger: any) => {\r\n            this.log = logger.create(\"preprocessor.karma-typescript\");\r\n\r\n            coverage.initialize(logger);\r\n\r\n            return (content: string, file: File, done: (e: any, c?: string) => void) => {\r\n                try {\r\n                    this.log.debug(\"Processing \\\"%s\\\". %s\", file.originalPath, content.length);\r\n                    file.path = config.transformPath(file.originalPath);\r\n                    file.relativePath = FileUtils.getRelativePath(file.originalPath, this.config.karma.basePath);\r\n\r\n                    compiler.compile(file, (emitOutput) => {\r\n                        if (emitOutput.hasError) {\r\n                            return done(\"COMPILATION ERROR\", content);\r\n                        }\r\n                        if (emitOutput.isDeclarationFile && !emitOutput.isAmbientModule) {\r\n                            return done(null, \" \");\r\n                        }\r\n                        bundler.bundle(file, emitOutput, (bundled: string) => {\r\n                            coverage.instrument(file, bundled, emitOutput, (result) => {\r\n                                done(null, result);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    this.log.error(\"%s\\n processing %s\\n%s\", e.message, file.originalPath, e.stack);\r\n                    done(e, null);\r\n                }\r\n            };\r\n        };\r\n\r\n        (this.create as any).$inject = [\"logger\"];\r\n    }\r\n}\r\n"]}