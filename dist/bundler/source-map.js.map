{"version":3,"file":"source-map.js","sourceRoot":"","sources":["../../src/bundler/source-map.ts"],"names":[],"mappings":"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","sourcesContent":["import * as combineSourceMap from \"combine-source-map\";\r\nimport * as convertSourceMap from \"convert-source-map\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport { Logger } from \"log4js\";\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { BundleItem } from \"./bundle-item\";\r\nimport { Queued } from \"./queued\";\r\n\r\nexport class SourceMap {\r\n\r\n    private combiner: Combiner;\r\n    private line: number = 0;\r\n\r\n    constructor(private config: Configuration, private log: Logger) {}\r\n\r\n    public initialize(bundle: string) {\r\n        this.combiner = combineSourceMap.create();\r\n        this.line = this.getNumberOfNewlines(bundle);\r\n    }\r\n\r\n    public removeSourceMapComment(queued: Queued): string {\r\n        return queued.emitOutput.sourceMapText ?\r\n            combineSourceMap.removeComments(queued.emitOutput.outputText) :\r\n            queued.emitOutput.outputText;\r\n    }\r\n\r\n    public getSourceMap(queued: Queued): convertSourceMap.SourceMapConverter {\r\n        if (queued.emitOutput.sourceMapText) {\r\n\r\n            const map = convertSourceMap.fromJSON(queued.emitOutput.sourceMapText);\r\n            if (!map.getProperty(\"sourcesContent\")) {\r\n                map.addProperty(\"sourcesContent\", [queued.emitOutput.sourceFile.text]);\r\n            }\r\n\r\n            return map;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public addFile(bundleItem: BundleItem) {\r\n\r\n        if (this.config.bundlerOptions.sourceMap) {\r\n\r\n            this.loadFileFromComment(bundleItem);\r\n\r\n            const sourceFile = path.relative(this.config.karma.basePath, bundleItem.filename);\r\n            this.combiner.addFile(\r\n                { sourceFile: path.join(\"/base\", sourceFile), source: bundleItem.source },\r\n                { line: this.line }\r\n            );\r\n        }\r\n\r\n        bundleItem.source = combineSourceMap.removeComments(bundleItem.source);\r\n    }\r\n\r\n    public offsetLineNumber(wrappedSource: string) {\r\n        if (this.config.bundlerOptions.sourceMap) {\r\n            this.line += this.getNumberOfNewlines(wrappedSource);\r\n        }\r\n    }\r\n\r\n    public getComment() {\r\n        return this.config.bundlerOptions.sourceMap ? this.combiner.comment() : \"\";\r\n    }\r\n\r\n    public loadFileFromComment(bundleItem: BundleItem) {\r\n\r\n        const commentMatch = convertSourceMap.mapFileCommentRegex.exec(bundleItem.source);\r\n\r\n        if (commentMatch && commentMatch[1]) {\r\n\r\n            let map: convertSourceMap.SourceMapConverter;\r\n            const dirname = path.dirname(bundleItem.filename);\r\n\r\n            if (!commentMatch[1].startsWith(\"data:\")) {\r\n                const mapFilename = path.join(dirname, commentMatch[1]);\r\n                try {\r\n                    const mapJson = fs.readFileSync(mapFilename, \"utf-8\");\r\n                    map = convertSourceMap.fromJSON(mapJson);\r\n                }\r\n                catch (error) {\r\n                    this.log.debug(\"Source map %s doesn't exist\", mapFilename);\r\n                }\r\n            }\r\n            else {\r\n                map = convertSourceMap.fromComment(commentMatch[0]);\r\n            }\r\n\r\n            if (!map) {\r\n                this.log.debug(\"Unable to resolve source map for %s\", bundleItem.filename);\r\n                return;\r\n            }\r\n\r\n            if (!map.getProperty(\"sourcesContent\")) {\r\n\r\n                const sourcesContent: string[] = [];\r\n                map.getProperty(\"sources\").forEach((source: string) => {\r\n                    const sourceFilename = path.join(dirname, source);\r\n                    try {\r\n                        const sourceContent = fs.readFileSync(sourceFilename, \"utf-8\");\r\n                        sourcesContent.push(sourceContent);\r\n                    }\r\n                    catch (error) {\r\n                        this.log.debug(\"Source file %s doesn't exist\", sourceFilename);\r\n                    }\r\n                });\r\n                map.addProperty(\"sourcesContent\", sourcesContent);\r\n            }\r\n\r\n            this.cleanupSources(map);\r\n\r\n            bundleItem.source = combineSourceMap.removeComments(bundleItem.source) + map.toComment();\r\n        }\r\n    }\r\n\r\n    private cleanupSources(map: convertSourceMap.SourceMapConverter) {\r\n        map.sourcemap.sources.forEach((source: string, index: number) => {\r\n            map.sourcemap.sources[index] = source.replace(\"webpack:///\", \"\");\r\n        });\r\n    }\r\n\r\n    private getNumberOfNewlines(source: any) {\r\n        const newlines = source.match(/\\n/g);\r\n        return newlines ? newlines.length : 0;\r\n    }\r\n}\r\n"]}