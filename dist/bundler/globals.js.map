{"version":3,"file":"globals.js","sourceRoot":"","sources":["../../src/bundler/globals.ts"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,+BAAiC;AACjC,uBAAyB;AAGzB,6CAA2C;AAG3C;IAEI,iBAAoB,MAAqB,EAAU,QAAkB;QAAjD,WAAM,GAAN,MAAM,CAAe;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAEnE,qBAAG,GAAV,UAAW,MAAoB,EAAE,WAAqB,EAAE,cAA0B;QAAlF,iBAkBC;QAhBG,IAAM,KAAK,GAAiB,EAAE,CAAC;QAE/B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAE3B,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,UAAC,IAAgB,EAAE,gBAAgB;YACvD,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,UAAC,UAAU,EAAE,gBAAgB;gBAC7D,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;oBAC3D,gBAAgB,EAAE,CAAC;gBACvB,CAAC,CAAC,CAAC;YACP,CAAC,EAAE;gBACC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrB,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnC,gBAAgB,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,cAAc,CAAC,CAAC;IACvB,CAAC;IAEO,gCAAc,GAAtB,UAAuB,KAAmB;QAEtC,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE;YAE3C,IAAM,MAAI,GAAG,qBAAqB,CAAC;YAEnC,KAAK,CAAC,IAAI,CAAC,IAAI,wBAAU,CAAC,MAAI,EAAE,MAAI,EAChC,EAAE,CAAC,GAAG,GAAG,qCAAqC;gBAC9C,EAAE,CAAC,GAAG,GAAG,yCAAyC,EAClD,SAAS,EAAE;gBACP,IAAI,wBAAU,CAAC,UAAU,CAAC;gBAC1B,IAAI,wBAAU,CAAC,QAAQ,CAAC;aAC3B,CAAC,CACL,CAAC;SACL;IACL,CAAC;IAEO,8BAAY,GAApB,UAAqB,KAAmB;QAAxC,iBAgBC;QAdG,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAM,IAAI,GAAG,kBAAkB,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YAC1D,IAAI,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACzB,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACjC;YACD,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,EAAE;YACR,KAAK,CAAC,IAAI,CAAC,IAAI,wBAAU,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;SACjE;IACL,CAAC;IACL,cAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,0BAAO","sourcesContent":["import * as async from \"async\";\r\nimport * as lodash from \"lodash\";\r\nimport * as os from \"os\";\r\n\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { BundleItem } from \"./bundle-item\";\r\nimport { Resolver } from \"./resolve/resolver\";\r\n\r\nexport class Globals {\r\n\r\n    constructor(private config: Configuration, private resolver: Resolver) { }\r\n\r\n    public add(buffer: BundleItem[], entrypoints: string[], onGlobalsAdded: () => void) {\r\n\r\n        const items: BundleItem[] = [];\r\n\r\n        this.addConstants(items);\r\n        this.addNodeGlobals(items);\r\n\r\n        async.eachSeries(items, (item: BundleItem, onGlobalResolved) => {\r\n            async.eachSeries(item.dependencies, (dependency, onModuleResolved) => {\r\n                this.resolver.resolveModule(item.filename, dependency, buffer, () => {\r\n                    onModuleResolved();\r\n                });\r\n            }, () => {\r\n                buffer.unshift(item);\r\n                entrypoints.unshift(item.filename);\r\n                onGlobalResolved();\r\n            });\r\n        }, onGlobalsAdded);\r\n    }\r\n\r\n    private addNodeGlobals(items: BundleItem[]): void {\r\n\r\n        if (this.config.bundlerOptions.addNodeGlobals) {\r\n\r\n            const name = \"bundle/node-globals\";\r\n\r\n            items.push(new BundleItem(name, name,\r\n                os.EOL + \"global.process=require('_process');\" +\r\n                os.EOL + \"global.Buffer=require('buffer').Buffer;\",\r\n                undefined, [\r\n                    new BundleItem(\"_process\"),\r\n                    new BundleItem(\"buffer\")\r\n                ])\r\n            );\r\n        }\r\n    }\r\n\r\n    private addConstants(items: BundleItem[]): void {\r\n\r\n        let source = \"\";\r\n        const name = \"bundle/constants\";\r\n\r\n        Object.keys(this.config.bundlerOptions.constants).forEach((key) => {\r\n            let value = this.config.bundlerOptions.constants[key];\r\n            if (!lodash.isString(value)) {\r\n                value = JSON.stringify(value);\r\n            }\r\n            source += os.EOL + \"global.\" + key + \"=\" + value + \";\";\r\n        });\r\n\r\n        if (source) {\r\n            items.push(new BundleItem(name, name, source, undefined, []));\r\n        }\r\n    }\r\n}\r\n"]}