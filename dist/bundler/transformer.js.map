{"version":3,"file":"transformer.js","sourceRoot":"","sources":["../../src/bundler/transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as acorn from \"acorn\";\r\nimport * as async from \"async\";\r\nimport { ErrorCallback } from \"async\";\r\nimport { Logger } from \"log4js\";\r\nimport * as os from \"os\";\r\nimport * as ts from \"typescript\";\r\n\r\nimport { Transform, TransformContext, TransformResult } from \"../api\";\r\nimport { Configuration } from \"../shared/configuration\";\r\nimport { Project } from \"../shared/project\";\r\nimport { BundleItem } from \"./bundle-item\";\r\nimport { Queued } from \"./queued\";\r\n\r\nexport class Transformer {\r\n\r\n    constructor(private config: Configuration, private log: Logger, private project: Project) { }\r\n\r\n    public applyTsTransforms(bundleQueue: Queued[], onTransformsApplied: () => void): void {\r\n\r\n        const transforms = this.config.bundlerOptions.transforms;\r\n\r\n        if (!transforms.length) {\r\n            process.nextTick(() => {\r\n                onTransformsApplied();\r\n            });\r\n            return;\r\n        }\r\n\r\n        async.eachSeries(bundleQueue, (queued: Queued, onQueueProcessed: ErrorCallback<Error>) => {\r\n\r\n            const context: TransformContext = {\r\n                config: this.config,\r\n                filename: queued.file.originalPath,\r\n                module: queued.file.originalPath,\r\n                source: queued.emitOutput.sourceFile.getFullText(),\r\n                ts: {\r\n                    ast: queued.emitOutput.sourceFile,\r\n                    transpiled: queued.emitOutput.outputText,\r\n                    version: ts.version\r\n                }\r\n            };\r\n            async.eachSeries(transforms, (transform: Transform, onTransformApplied: ErrorCallback<Error>) => {\r\n                process.nextTick(() => {\r\n                    transform(context, (error: Error, result: TransformResult | boolean, transpile: boolean = true) => {\r\n                        if (typeof result !== \"object\" || result === null) {\r\n                            result = {\r\n                                dirty: !!result,\r\n                                transpile\r\n                            };\r\n                        }\r\n                        this.handleError(error, transform, context);\r\n                        if (result.dirty) {\r\n                            if (result.transpile) {\r\n                                const transpiled = ts.transpileModule(context.source, {\r\n                                    compilerOptions: this.project.getTsconfig().options,\r\n                                    fileName: context.filename\r\n                                });\r\n                                queued.emitOutput.outputText = transpiled.outputText;\r\n                                queued.emitOutput.sourceMapText = transpiled.sourceMapText;\r\n                            }\r\n                            else {\r\n                                queued.emitOutput.outputText = context.ts.transpiled;\r\n                            }\r\n                        }\r\n                        onTransformApplied();\r\n                    });\r\n                });\r\n            }, onQueueProcessed);\r\n        }, onTransformsApplied);\r\n    }\r\n\r\n    public applyTransforms(bundleItem: BundleItem, onTransformsApplied: () => void): void {\r\n\r\n        const transforms = this.config.bundlerOptions.transforms;\r\n\r\n        if (!transforms.length) {\r\n            process.nextTick(() => {\r\n                onTransformsApplied();\r\n            });\r\n            return;\r\n        }\r\n\r\n        const context: TransformContext = {\r\n            config: this.config,\r\n            filename: bundleItem.filename,\r\n            js: {\r\n                ast: bundleItem.ast || { end: 0, start: 0, type: \"\" }\r\n            },\r\n            module: bundleItem.moduleName,\r\n            source: bundleItem.source\r\n        };\r\n        async.eachSeries(transforms, (transform: Transform, onTransformApplied: ErrorCallback<Error>) => {\r\n            process.nextTick(() => {\r\n                transform(context, (error: Error, result: TransformResult | boolean) => {\r\n                    if (typeof result !== \"object\" || result === null) {\r\n                        result = {\r\n                            dirty: !!result\r\n                        };\r\n                    }\r\n                    this.handleError(error, transform, context);\r\n                    if (result.dirty) {\r\n                        bundleItem.ast = context.js.ast;\r\n                        bundleItem.source = context.source;\r\n                        bundleItem.transformedScript = result.transformedScript;\r\n                        if (result.transformedScript && bundleItem.ast) {\r\n                            bundleItem.ast = acorn.parse(context.source, this.config.bundlerOptions.acornOptions);\r\n                        }\r\n                    }\r\n                    onTransformApplied();\r\n                });\r\n            });\r\n        }, onTransformsApplied);\r\n    }\r\n\r\n    private handleError(error: Error, transform: Transform, context: TransformContext): void {\r\n        if (error) {\r\n            const errorMessage = context.filename + \": \" + error.message + os.EOL +\r\n                \"Transform function: \" + os.EOL + os.EOL +\r\n                transform + os.EOL;\r\n            this.log.error(errorMessage);\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"]}