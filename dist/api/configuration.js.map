{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../src/api/configuration.ts"],"names":[],"mappings":"","sourcesContent":["import * as acorn from \"acorn\";\r\nimport * as ts from \"typescript\";\r\n\r\nimport { Transform } from \"./transforms\";\r\n\r\nexport interface KarmaTypescriptConfig {\r\n    [key: string]: any;\r\n    bundlerOptions?: BundlerOptions;\r\n    compilerDelay?: number;\r\n    compilerOptions?: any;\r\n    coverageOptions?: CoverageOptions;\r\n    exclude?: string[] | Extendable;\r\n    include?: string[] | Extendable;\r\n    reports?: Reports;\r\n    transformPath?: (filepath: string) => string;\r\n    tsconfig?: string;\n    stopOnFailure?: boolean;\r\n}\r\n\r\nexport interface BundlerOptions {\r\n    acornOptions?: acorn.Options;\r\n    addNodeGlobals?: boolean;\r\n    constants?: { [key: string]: any };\r\n    entrypoints?: RegExp;\r\n    exclude?: string[];\r\n    ignore?: string[];\r\n    noParse?: string[];\r\n    resolve?: Resolve;\r\n    sourceMap?: boolean;\r\n    transforms?: Transform[];\r\n    validateSyntax?: boolean;\r\n}\r\n\r\nexport interface Extendable {\r\n    mode: \"merge\" | \"replace\";\r\n    values: string[];\r\n}\r\n\r\nexport interface Resolve {\r\n    alias?: {\r\n        [key: string]: string;\r\n    };\r\n    extensions?: string[];\r\n    directories?: string[];\r\n}\r\n\r\nexport interface CompilerOptions extends ts.CompilerOptions {\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface ThresholdOptions {\r\n    file?: {\r\n        branches?: number;\r\n        excludes?: string[];\r\n        functions?: number;\r\n        lines?: number;\r\n        overrides?: {\r\n            [key: string]: {\r\n                branches?: number;\r\n                functions?: number;\r\n                lines?: number;\r\n                statements: number;\r\n            }\r\n        },\r\n        statements?: number;\r\n    };\r\n    global?: {\r\n        branches?: number;\r\n        excludes?: string[];\r\n        functions?: number;\r\n        lines?: number;\r\n        statements?: number;\r\n    };\r\n}\r\n\r\nexport interface CoverageOptions {\r\n    instrumentation?: boolean;\r\n    instrumenterOptions?: any;\r\n    exclude?: RegExp | RegExp[];\r\n    threshold?: ThresholdOptions;\r\n}\r\n\r\nexport interface Reports {\r\n    clover?: string | Destination;\r\n    cobertura?: string | Destination;\r\n    html?: string | Destination;\r\n    \"html-spa\"?: string | Destination;\r\n    \"json-summary\"?: string | Destination;\r\n    json?: string | Destination;\r\n    lcovonly?: string | Destination;\r\n    teamcity?: string | Destination;\r\n    \"text-lcov\"?: string | Destination;\r\n    \"text-summary\"?: string | Destination;\r\n    text?: string | Destination;\r\n    [key: string]: string | Destination;\r\n}\r\n\r\nexport interface Destination {\r\n    directory?: string;\r\n    filename?: string;\r\n    subdirectory?: string | (() => void);\r\n}\r\n"]}