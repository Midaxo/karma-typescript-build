{"version":3,"file":"transforms.js","sourceRoot":"","sources":["../../src/api/transforms.ts"],"names":[],"mappings":"","sourcesContent":["import * as log4js from \"log4js\";\r\nimport * as ts from \"typescript\";\r\n\r\nimport { Configuration } from \"../shared/configuration\";\r\n\r\nexport interface TransformResult {\r\n    dirty?: boolean;\r\n    transpile?: boolean;\r\n    transformedScript?: boolean;\r\n}\r\n\r\nexport interface TransformCallback {\r\n    (error: Error, dirty: boolean, transpile?: boolean): void;\r\n    (error: Error, result: TransformResult): void;\r\n}\r\n\r\nexport interface TransformContextJs {\r\n    ast: acorn.Node;\r\n}\r\n\r\nexport interface TransformContextTs {\r\n    version: string;\r\n    ast: ts.SourceFile;\r\n    transpiled: string;\r\n}\r\n\r\nexport interface TransformContext {\r\n    config: Configuration;\r\n    js?: TransformContextJs;\r\n    filename: string;\r\n    module: string;\r\n    source: string;\r\n    ts?: TransformContextTs;\r\n}\r\n\r\nexport interface TransformInitializeLogOptions {\r\n    appenders: { [name: string]: log4js.Appender };\r\n    level: string;\r\n}\r\n\r\nexport type TransformInitialize = (log: TransformInitializeLogOptions) => void;\r\n\r\nexport interface Transform {\r\n    (context: TransformContext, callback: TransformCallback): void;\r\n    initialize?: TransformInitialize;\r\n}\r\n"]}