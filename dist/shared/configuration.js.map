{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../src/shared/configuration.ts"],"names":[],"mappings":"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","sourcesContent":["import * as lodash from \"lodash\";\r\nimport * as log4js from \"log4js\";\r\n\r\nimport { ConfigOptions } from \"karma\";\r\nimport { merge } from \"lodash\";\r\n\r\nimport {\r\n    BundlerOptions,\r\n    CoverageOptions,\r\n    Extendable,\r\n    KarmaTypescriptConfig,\r\n    Reports\r\n} from \"../api\";\r\n\r\nexport interface LoggerList {\r\n    [key: string]: log4js.Logger;\r\n}\r\n\r\nexport interface Configuration {\r\n    [key: string]: any;\r\n}\r\n\r\nexport class Configuration implements KarmaTypescriptConfig {\r\n\r\n    public karma: ConfigOptions;\r\n    public bundlerOptions: BundlerOptions;\r\n    public compilerDelay: number;\r\n    public compilerOptions: any;\r\n    public coverageOptions: CoverageOptions;\r\n    public defaultTsconfig: any;\r\n    public exclude: string[] | Extendable;\r\n    public include: string[] | Extendable;\r\n    public logAppenders: { [name: string]: log4js.Appender };\r\n    public reports: Reports;\r\n    public transformPath: (filepath: string) => string;\r\n    public tsconfig: string;\n    public stopOnFailure: boolean;\r\n\r\n    public hasCoverageThreshold: boolean;\r\n\r\n    private asserted: boolean;\r\n    private karmaTypescriptConfig: KarmaTypescriptConfig;\r\n    private callbacks: (() => void)[] = [];\r\n\r\n    constructor(private loggers: LoggerList) {}\r\n\r\n    public initialize(config: ConfigOptions) {\r\n\r\n        this.karma = config || {};\r\n        this.karmaTypescriptConfig = (config as any).karmaTypescriptConfig || {};\r\n\r\n        this.configureLogging();\r\n        this.configureBundler();\r\n        this.configureCoverage();\r\n        this.configureProject();\r\n        this.configurePreprocessor();\r\n        this.configureReporter();\r\n        this.assertConfiguration();\r\n\r\n        for (const callback of this.callbacks) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public whenReady(callback: () => void) {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    public hasFramework(name: string): boolean {\r\n        return this.karma.frameworks.indexOf(name) !== -1;\r\n    }\r\n\r\n    public hasPreprocessor(name: string): boolean {\r\n        for (const preprocessor in this.karma.preprocessors) {\r\n            if (this.karma.preprocessors[preprocessor] &&\r\n                this.karma.preprocessors[preprocessor].indexOf(name) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public hasReporter(name: string): boolean {\r\n        return this.karma.reporters.indexOf(name) !== -1;\r\n    }\r\n\r\n    private configureLogging() {\r\n        this.logAppenders = this.karma.loggers instanceof Array\r\n            ? this.karma.loggers.reduce((logAppenders, logger, index) =>\r\n                Object.assign(logAppenders, { [logger.type + index.toString()]: logger }), {})\r\n            : this.karma.loggers;\r\n\r\n        if (this.logAppenders != null) {\r\n            log4js.configure({\r\n                appenders: this.logAppenders,\r\n                categories: {\r\n                    default: {\r\n                        appenders: Object.keys(this.logAppenders),\r\n                        level: this.karma.logLevel\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        Object.keys(this.loggers).forEach((key) => {\r\n            this.loggers[key].level = this.karma.logLevel;\r\n        });\r\n    }\r\n\r\n    private configureBundler(): void {\r\n\r\n        const defaultBundlerOptions: BundlerOptions = {\r\n            acornOptions: {\r\n                ecmaVersion: 10,\r\n                sourceType: \"module\"\r\n            },\r\n            addNodeGlobals: true,\r\n            constants: {},\r\n            entrypoints: /.*/,\r\n            exclude: [],\r\n            ignore: [],\r\n            noParse: [],\r\n            resolve: {\r\n                alias: {},\r\n                directories: [\"node_modules\"],\r\n                extensions: [\".js\", \".json\", \".mjs\", \".ts\", \".tsx\"]\r\n            },\r\n            sourceMap: false,\r\n            transforms: [],\r\n            validateSyntax: true\r\n        };\r\n\r\n        this.bundlerOptions = merge(defaultBundlerOptions, this.karmaTypescriptConfig.bundlerOptions);\r\n    }\r\n\r\n    private configureCoverage() {\r\n\r\n        const defaultCoverageOptions: CoverageOptions = {\r\n            exclude: /\\.(d|spec|test)\\.ts$/i,\r\n            instrumentation: true,\r\n            instrumenterOptions: {},\r\n            threshold: {\r\n                file: {\r\n                    branches: 0,\r\n                    excludes: [],\r\n                    functions: 0,\r\n                    lines: 0,\r\n                    overrides: {},\r\n                    statements: 0\r\n                },\r\n                global: {\r\n                    branches: 0,\r\n                    excludes: [],\r\n                    functions: 0,\r\n                    lines: 0,\r\n                    statements: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.hasCoverageThreshold = !!this.karmaTypescriptConfig.coverageOptions &&\r\n            !!this.karmaTypescriptConfig.coverageOptions.threshold;\r\n        this.coverageOptions = merge(defaultCoverageOptions, this.karmaTypescriptConfig.coverageOptions);\r\n\r\n        this.assertCoverageExclude(this.coverageOptions.exclude);\r\n    }\r\n\r\n    private configureProject(): void {\r\n\r\n        this.compilerDelay = this.karmaTypescriptConfig.compilerDelay || 250;\r\n        this.compilerOptions = this.karmaTypescriptConfig.compilerOptions;\r\n\r\n        this.defaultTsconfig = {\r\n            compilerOptions: {\r\n                emitDecoratorMetadata: true,\r\n                experimentalDecorators: true,\r\n                jsx: \"react\",\r\n                module: \"commonjs\",\r\n                sourceMap: true,\r\n                target: \"ES5\"\r\n            },\r\n            exclude: [\"node_modules\"]\r\n        };\r\n\r\n        this.exclude = this.karmaTypescriptConfig.exclude;\r\n        this.include = this.karmaTypescriptConfig.include;\r\n        this.tsconfig = this.karmaTypescriptConfig.tsconfig;\r\n        this.assertExtendable(\"exclude\");\r\n        this.assertExtendable(\"include\");\n        this.stopOnFailure = this.karmaTypescriptConfig.stopOnFailure !== false;\r\n    }\r\n\r\n    private configurePreprocessor() {\r\n\r\n        const transformPath = (filepath: string) => {\r\n            return filepath.replace(/\\.(ts|tsx)$/, \".js\");\r\n        };\r\n\r\n        this.transformPath = this.karmaTypescriptConfig.transformPath || transformPath;\r\n    }\r\n\r\n    private configureReporter() {\r\n        this.reports = this.karmaTypescriptConfig.reports || { html: \"coverage\" };\r\n    }\r\n\r\n    private assertConfiguration() {\r\n        if (!this.asserted) {\r\n            this.asserted = true;\r\n            this.assertFrameworkConfiguration();\r\n            this.assertDeprecatedOptions();\r\n        }\r\n    }\r\n\r\n    private assertFrameworkConfiguration() {\r\n        if (this.hasPreprocessor(\"karma-typescript\") &&\r\n          (!this.karma.frameworks || this.karma.frameworks.indexOf(\"karma-typescript\") === -1)) {\r\n            throw new Error(\"Missing karma-typescript framework, please add\" +\r\n                            \"'frameworks: [\\\"karma-typescript\\\"]' to your Karma config\");\r\n        }\r\n    }\r\n\r\n    private assertExtendable(key: string) {\r\n        const extendable = (this[key] as Extendable);\r\n\r\n        if (extendable === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(extendable)) {\r\n            extendable.forEach((item) => {\r\n                if (!lodash.isString(item)) {\r\n                    throw new Error(\"Expected a string in 'karmaTypescriptConfig.\" + key + \"', got [\" +\r\n                        typeof item + \"]: \" + item);\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (lodash.isObject(extendable)) {\r\n            if ([\"merge\", \"replace\"].indexOf(extendable.mode) === -1) {\r\n                throw new Error(\"Expected 'karmaTypescriptConfig.\" + key + \".mode' to be 'merge|replace', got '\" +\r\n                    extendable.mode + \"'\");\r\n            }\r\n            if (Array.isArray(extendable.values)) {\r\n                extendable.values.forEach((item) => {\r\n                    if (!lodash.isString(item)) {\r\n                        throw new Error(\"Expected a string in 'karmaTypescriptConfig.\" + key + \".values', got [\" +\r\n                            typeof item + \"]: \" + item);\r\n                    }\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        throw new Error(\"The option 'karmaTypescriptConfig.\" + key +\r\n                        \"' must be an array of strings or { mode: \\\"replace|extend\\\", values: [string, string], got [\" +\r\n                    typeof this.exclude + \"]: \" + this.exclude);\r\n    }\r\n\r\n    private assertDeprecatedOptions() {\r\n        if ((this.bundlerOptions as any).ignoredModuleNames) {\r\n            throw new Error(\"The option 'karmaTypescriptConfig.bundlerOptions.ignoredModuleNames' has been \" +\r\n                            \"removed, please use 'karmaTypescriptConfig.bundlerOptions.exclude' instead\");\r\n        }\r\n\r\n        if ((this.karmaTypescriptConfig as any).excludeFromCoverage !== undefined) {\r\n            throw new Error(\"The option 'karmaTypescriptConfig.excludeFromCoverage' has been \" +\r\n                            \"removed, please use 'karmaTypescriptConfig.coverageOptions.exclude' instead\");\r\n        }\r\n\r\n        if ((this.karmaTypescriptConfig as any).disableCodeCoverageInstrumentation !== undefined) {\r\n            throw new Error(\"The option 'karmaTypescriptConfig.disableCodeCoverageInstrumentation' has been \" +\r\n                            \"removed, please use 'karmaTypescriptConfig.coverageOptions.instrumentation' instead\");\r\n        }\r\n\r\n        if ((this.karmaTypescriptConfig as any).remapOptions !== undefined) {\r\n            throw new Error(\"The option 'karmaTypescriptConfig.remapOptions' has been \" +\r\n                            \"removed, please use 'karmaTypescriptConfig.coverageOptions.instrumenterOptions' instead\");\r\n        }\r\n    }\r\n\r\n    private assertCoverageExclude(regex: any) {\r\n        if (regex instanceof RegExp || !regex) {\r\n            return regex;\r\n        }\r\n        else if (Array.isArray(regex)) {\r\n            regex.forEach((r) => {\r\n                if (!(r instanceof RegExp)) {\r\n                    this.throwCoverageExcludeError(r);\r\n                }\r\n            });\r\n            return regex;\r\n        }\r\n\r\n        this.throwCoverageExcludeError(regex);\r\n    }\r\n\r\n    private throwCoverageExcludeError(regex: any) {\r\n        throw new Error(\"karmaTypescriptConfig.coverageOptions.exclude \" +\r\n            \"must be a single RegExp or an Array of RegExp, got [\" + typeof regex + \"]: \" + regex);\r\n    }\r\n}\r\n"]}